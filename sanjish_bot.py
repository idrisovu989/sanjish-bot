import asyncio
import logging
import sqlite3
import bcrypt
import random
import os
from datetime import date

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.exceptions import TelegramBadRequest

# --- –¢–ê–ù–ó–ò–ú–û–¢ (CONFIGURATION) ---
BOT_TOKEN = "8132721879:AAEO6EF8FSvOi3MHENA4A6ldBzjMlfHhXho" # –¢–æ–∫–µ–Ω–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
ADMIN_ID = 7226492351 # ID-–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥
DB_FILE = "SanjishDB.db"
QUESTIONS_PER_TEST = 15

# --- –°–û–•–¢–û–†–ò –ë–ê–ó–ê–ò –ú–ê–™–õ–£–ú–û–¢ (DATABASE SETUP) ---
def setup_database():
    with sqlite3.connect(DB_FILE) as conn:
        cursor = conn.cursor()
        cursor.execute("PRAGMA foreign_keys = ON")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS Korbaron (
            telegram_id INTEGER PRIMARY KEY, user_id_custom TEXT UNIQUE, nomu_nasab TEXT NOT NULL, parol BLOB NOT NULL, role TEXT DEFAULT 'donishju'
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS Fanho (
            id INTEGER PRIMARY KEY AUTOINCREMENT, nomi_fan TEXT UNIQUE NOT NULL
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS PasswordRequests (
            telegram_id INTEGER PRIMARY KEY, user_name TEXT NOT NULL, verification_code TEXT NOT NULL
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS Savolho (
            id INTEGER PRIMARY KEY AUTOINCREMENT, fan_id INTEGER NOT NULL, savol_matn TEXT NOT NULL,
            variant_a TEXT NOT NULL, variant_b TEXT NOT NULL, variant_c TEXT NOT NULL, variant_d TEXT NOT NULL,
            javobi_durust TEXT NOT NULL, FOREIGN KEY (fan_id) REFERENCES Fanho (id) ON DELETE CASCADE
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS Natijaho (
            id INTEGER PRIMARY KEY AUTOINCREMENT, user_telegram_id INTEGER NOT NULL, fan_id INTEGER NOT NULL,
            sanai_suporidan DATE NOT NULL, javobhoi_durust INTEGER NOT NULL, javobhoi_nodurust INTEGER NOT NULL,
            FOREIGN KEY (user_telegram_id) REFERENCES Korbaron (telegram_id) ON DELETE CASCADE,
            FOREIGN KEY (fan_id) REFERENCES Fanho (id) ON DELETE CASCADE
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS AnsweredQuestions (
            user_telegram_id INTEGER NOT NULL, savol_id INTEGER NOT NULL,
            PRIMARY KEY (user_telegram_id, savol_id),
            FOREIGN KEY (user_telegram_id) REFERENCES Korbaron (telegram_id) ON DELETE CASCADE,
            FOREIGN KEY (savol_id) REFERENCES Savolho (id) ON DELETE CASCADE
        )""")
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS SupportTickets (
            ticket_id INTEGER PRIMARY KEY AUTOINCREMENT, user_telegram_id INTEGER NOT NULL, user_name TEXT,
            message_text TEXT NOT NULL, status TEXT DEFAULT 'open', timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_telegram_id) REFERENCES Korbaron (telegram_id) ON DELETE CASCADE
        )""")
        cursor.execute("SELECT * FROM Korbaron WHERE telegram_id = ?", (ADMIN_ID,))
        if not cursor.fetchone():
            dummy_password = bcrypt.hashpw(os.urandom(16), bcrypt.gensalt())
            cursor.execute("INSERT INTO Korbaron (telegram_id, user_id_custom, nomu_nasab, parol, role) VALUES (?, ?, ?, ?, ?)",
                           (ADMIN_ID, 'ADMIN-001', 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', dummy_password, 'admin'))

# --- –§–£–ù–ö–°–ò–Ø“≤–û–ò –Å–†–ò–†–ê–°–û–ù ---
def db_execute(query, params=(), fetchone=False, fetchall=False):
    with sqlite3.connect(DB_FILE) as conn:
        conn.execute("PRAGMA foreign_keys = ON")
        cursor = conn.cursor()
        cursor.execute(query, params)
        if fetchone: return cursor.fetchone()
        if fetchall: return cursor.fetchall()
        conn.commit()

def generate_custom_user_id():
    last_id_row = db_execute("SELECT user_id_custom FROM Korbaron WHERE user_id_custom LIKE 'USER-%' ORDER BY user_id_custom DESC LIMIT 1", fetchone=True)
    return f"USER-{(int(last_id_row[0].split('-')[1]) + 1):04d}" if last_id_row else "USER-0001"

# --- “≤–û–õ–ê–¢“≤–û–ò FSM ---
class AuthStates(StatesGroup): getting_name, getting_password_register, getting_password_login = State(), State(), State()
class AdminStates(StatesGroup): add_fan_name, add_question_select_fan, add_question_text, add_question_option_a, add_question_option_b, add_question_option_c, add_question_option_d, add_question_correct_answer, delete_question_select_fan, replying_to_ticket = State(), State(), State(), State(), State(), State(), State(), State(), State(), State()
class PasswordResetStates(StatesGroup): getting_new_password = State()
class StudentStates(StatesGroup): taking_test, getting_support_message = State(), State()
class SettingsStates(StatesGroup): getting_new_password_from_settings = State()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–ê“≤–û ---
def get_start_keyboard(is_registered): return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîë –í–æ—Ä–∏–¥—à–∞–≤”£", callback_data="login_start")], [InlineKeyboardButton(text="üîÑ –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—Ä–æ–ª", callback_data="reset_password_start")]] if is_registered else [[InlineKeyboardButton(text="üìù –ë–∞“õ–∞–π–¥–≥–∏—Ä”£", callback_data="register_start")]])
def get_admin_panel_keyboard(): return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üìö –ò–¥–æ—Ä–∞–∏ –§–∞–Ω“≥–æ", callback_data="admin_manage_fanho"), InlineKeyboardButton(text="‚ùì –ò–¥–æ—Ä–∞–∏ –°–∞–≤–æ–ª“≥–æ", callback_data="admin_manage_questions")], [InlineKeyboardButton(text="üë• –†”Ø–π—Ö–∞—Ç–∏ –ö–æ—Ä–±–∞—Ä–æ–Ω", callback_data="admin_manage_users"), InlineKeyboardButton(text="üîí –î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ –ü–∞—Ä–æ–ª", callback_data="admin_password_requests")], [InlineKeyboardButton(text="üì® –ü–∞—ë–º“≥–æ–∏ –ö”Ø–º–∞–∫", callback_data="admin_support_tickets")], [InlineKeyboardButton(text="üîÑ –ù–∞–≤—Å–æ–∑”£", callback_data="admin_refresh_panel")]])
def get_student_panel_keyboard(): return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úçÔ∏è –°—É–ø–æ—Ä–∏–¥–∞–Ω–∏ –¢–µ—Å—Ç", callback_data="student_start_test")], [InlineKeyboardButton(text="üìä –ù–∞—Ç–∏“∑–∞“≥–æ–∏ –ú–∞–Ω", callback_data="student_my_results")], [InlineKeyboardButton(text="‚öôÔ∏è –¢–∞–Ω–∑–∏–º–æ—Ç", callback_data="student_settings")]])
def get_student_settings_inline_keyboard(): return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –ò–≤–∞–∑ –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—Ä–æ–ª", callback_data="settings_change_password")], [InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç –±–∞ –ú–µ–Ω—é", callback_data="back_to_student_panel")]])
def get_student_reply_keyboard(): return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚úçÔ∏è –°—É–ø–æ—Ä–∏–¥–∞–Ω–∏ –¢–µ—Å—Ç"), KeyboardButton(text="üìä –ù–∞—Ç–∏“∑–∞“≥–æ–∏ –ú–∞–Ω")], [KeyboardButton(text="‚öôÔ∏è –¢–∞–Ω–∑–∏–º–æ—Ç"), KeyboardButton(text="üí¨ –ö”Ø–º–∞–∫")], [KeyboardButton(text="üö™ –ë–∞—Ä–æ–º–∞–¥–∞–Ω")]], resize_keyboard=True)
back_button_admin, back_button_student = InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="back_to_admin_panel"), InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç –±–∞ –ú–µ–Ω—é", callback_data="back_to_student_panel_main_menu")

# --- –†–û–£–¢–ï–†“≤–û ---
main_router, admin_router, student_router = Router(), Router(), Router()

# --- HANDLER-“≤–û–ò –ê–°–û–°”¢ –í–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¢–°–ò–Ø ---
@main_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == ADMIN_ID:
        await message.answer("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")
    else:
        user = db_execute("SELECT * FROM Korbaron WHERE telegram_id = ?", (message.from_user.id,), fetchone=True)
        await message.answer(f"üëã **–°–∞–ª–æ–º, {message.from_user.first_name}!**\n–•—É—à –æ–º–∞–¥–µ–¥ –±–∞ **Sanjish Bot**!", reply_markup=ReplyKeyboardRemove(), parse_mode="Markdown")
        prompt = "_–®—É–º–æ –∞–ª–ª–∞–∫–∞–π —Å–∞–±—Ç —à—É–¥–∞–µ–¥. –ë–∞—Ä–æ–∏ –∏–¥–æ–º–∞ –≤–æ—Ä–∏–¥ —à–∞–≤–µ–¥._" if user else "_–ë–∞—Ä–æ–∏ –æ“ì–æ–∑–∏ –∫–æ—Ä –∞–∑ –±–∞“õ–∞–π–¥–≥–∏—Ä”£ –≥—É–∑–∞—Ä–µ–¥._"
        await message.answer(prompt, reply_markup=get_start_keyboard(is_registered=bool(user)), parse_mode="Markdown")

@main_router.callback_query(F.data == "register_start")
async def register_start(callback: CallbackQuery, state: FSMContext): await callback.message.edit_text("üìù **–ë–∞“õ–∞–π–¥–≥–∏—Ä”£**\n\n_–ù–æ–º –≤–∞ –Ω–∞—Å–∞–±–∏ –ø—É—Ä—Ä–∞–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:_\n(–ú–∞—Å–∞–ª–∞–Ω: –ê–ª–∏–µ–≤ –í–∞–ª”£)", parse_mode="Markdown"); await state.set_state(AuthStates.getting_name); await callback.answer()
@main_router.message(AuthStates.getting_name)
async def get_name(message: Message, state: FSMContext):
    if not message.text or len(message.text.split()) < 2: await message.answer("‚ùå **–•–∞—Ç–æ–≥”£:** –ù–æ–º –≤–∞ –Ω–∞—Å–∞–±–∏ —Ö—É–¥—Ä–æ –¥—É—Ä—É—Å—Ç –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥."); return
    await state.update_data(nomu_nasab=message.text); await message.answer("üîê –ê–∫–Ω—É–Ω, –ø–∞—Ä–æ–ª–∏ —Ö—É–¥—Ä–æ —Ñ–∏–∫—Ä –∫—É–Ω–µ–¥.\n_–ü–∞—Ä–æ–ª –±–æ—è–¥ > 5 –∞–ª–æ–º–∞—Ç –±–æ—à–∞–¥._", parse_mode="Markdown"); await state.set_state(AuthStates.getting_password_register)
@main_router.message(AuthStates.getting_password_register)
async def get_password_register(message: Message, state: FSMContext):
    parol = message.text
    try: await message.delete()
    except TelegramBadRequest: pass
    if not parol or len(parol) < 6: await message.answer("‚ö†Ô∏è **–û–≥–æ“≥”£:** –ü–∞—Ä–æ–ª –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª 6 –∞–ª–æ–º–∞—Ç –¥–æ—à—Ç–∞ –±–æ—à–∞–¥."); return
    user_data = await state.get_data(); user_id_custom = generate_custom_user_id()
    hashed_password = bcrypt.hashpw(parol.encode('utf-8'), bcrypt.gensalt())
    db_execute("INSERT INTO Korbaron (telegram_id, user_id_custom, nomu_nasab, parol) VALUES (?, ?, ?, ?)", (message.from_user.id, user_id_custom, user_data['nomu_nasab'], hashed_password))
    await message.answer(f"üéâ **–¢–∞–±—Ä–∏–∫, {user_data['nomu_nasab']}!**\n–®—É–º–æ —Å–∞–±—Ç–∏ –Ω–æ–º —à—É–¥–µ–¥!\n**ID-–∏ —à—É–º–æ:** `{user_id_custom}`", parse_mode="Markdown")
    await state.clear(); await asyncio.sleep(2); await cmd_start(message, state)
@main_router.callback_query(F.data == "login_start")
async def login_start(callback: CallbackQuery, state: FSMContext): await state.update_data(main_menu_message_id=callback.message.message_id); await callback.message.edit_text("üîê **–í–æ—Ä–∏–¥—à–∞–≤”£**\n\n_–ü–∞—Ä–æ–ª–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:_", parse_mode="Markdown"); await state.set_state(AuthStates.getting_password_login); await callback.answer()
@main_router.message(AuthStates.getting_password_login)
async def get_password_login(message: Message, state: FSMContext, bot: Bot):
    parol_entered = message.text; user_data_fsm = await state.get_data(); main_menu_message_id = user_data_fsm.get('main_menu_message_id')
    try:
        await message.delete()
        if main_menu_message_id:
            await bot.delete_message(message.chat.id, main_menu_message_id)
    except TelegramBadRequest:
        pass
    user_db_data = db_execute("SELECT parol, role, nomu_nasab FROM Korbaron WHERE telegram_id = ?", (message.from_user.id,), fetchone=True)
    if user_db_data and bcrypt.checkpw(parol_entered.encode('utf-8'), user_db_data[0]):
        role, nomu_nasab = user_db_data[1], user_db_data[2]; await state.clear()
        if role == 'admin': await message.answer("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")
        else: await message.answer(f"üéì **–ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å–∏–∏ {nomu_nasab}**", reply_markup=get_student_reply_keyboard(), parse_mode="Markdown")
    else:
        await state.clear(); sent_msg = await message.answer("‚ùå **–ü–∞—Ä–æ–ª–∏ –Ω–æ–¥—É—Ä—É—Å—Ç!**", parse_mode="Markdown"); await asyncio.sleep(2)
        try: await sent_msg.delete()
        except TelegramBadRequest: pass
        await cmd_start(message, state)
@main_router.message(F.text == "üö™ –ë–∞—Ä–æ–º–∞–¥–∞–Ω")
async def logout_reply_button(message: Message, state: FSMContext): await state.clear(); await message.answer("üö™ –®—É–º–æ –∞–∑ —Å–∏—Å—Ç–µ–º–∞ –±–∞—Ä–æ–º–∞–¥–µ–¥.", reply_markup=ReplyKeyboardRemove()); await asyncio.sleep(1); await cmd_start(message, state)
@admin_router.callback_query(F.data == "admin_refresh_panel")
async def refresh_admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try: await callback.message.edit_text("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")
    except TelegramBadRequest: await callback.message.answer("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")
    await callback.answer("–ü–∞–Ω–µ–ª –Ω–∞–≤—Å–æ–∑”£ —à—É–¥.")
@main_router.callback_query(F.data == "reset_password_start")
async def reset_password_start(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id;
    if db_execute("SELECT * FROM PasswordRequests WHERE telegram_id = ?", (user_id,), fetchone=True): await callback.answer("‚è≥ –®—É–º–æ –∞–ª–ª–∞–∫–∞–π –¥–∞—Ä—Ö–æ—Å—Ç —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞–µ–¥.", show_alert=True); return
    verification_code = str(random.randint(1000, 9999))
    db_execute("INSERT INTO PasswordRequests (telegram_id, user_name, verification_code) VALUES (?, ?, ?)", (user_id, callback.from_user.full_name, verification_code))
    try: await bot.send_message(ADMIN_ID, f"üîî **–î–∞—Ä—Ö–æ—Å—Ç–∏ –Ω–∞–≤!**\n–ö–æ—Ä–±–∞—Ä–∏ {callback.from_user.full_name} (`{user_id}`) –∏–≤–∞–∑–∏ –ø–∞—Ä–æ–ª—Ä–æ —Ö–æ—Å—Ç.", parse_mode="Markdown")
    except Exception as e: logging.error(f"Failed to send message to admin: {e}")
    await callback.answer("‚úÖ –î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥.", show_alert=True)
@main_router.callback_query(F.data.startswith("vcode_"))
async def verify_code(callback: CallbackQuery, state: FSMContext, bot: Bot):
    _, selected, correct = callback.data.split("_")
    try: await callback.message.delete(); await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id - 1)
    except TelegramBadRequest: pass
    if selected == correct: await callback.message.answer("‚úÖ –ö–æ–¥ –¥—É—Ä—É—Å—Ç. –ü–∞—Ä–æ–ª–∏ –Ω–∞–≤—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∏–Ω. 6 –∞–ª–æ–º–∞—Ç):"); await state.set_state(PasswordResetStates.getting_new_password)
    else: await callback.message.answer("‚ùå –ö–æ–¥–∏ –Ω–æ–¥—É—Ä—É—Å—Ç! –†–∞–≤–∞–Ω–¥ –±–µ–∫–æ—Ä —à—É–¥. /start")
    await callback.answer()

@main_router.message(PasswordResetStates.getting_new_password)
async def get_new_password(message: Message, state: FSMContext):
    parol = message.text
    try:
        await message.delete()
    except TelegramBadRequest:
        pass
    if not parol or len(parol) < 6: await message.answer("‚ö†Ô∏è **–û–≥–æ“≥”£:** –ü–∞—Ä–æ–ª –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª 6 –∞–ª–æ–º–∞—Ç –¥–æ—à—Ç–∞ –±–æ—à–∞–¥."); return

    hashed_password = bcrypt.hashpw(parol.encode('utf-8'), bcrypt.gensalt())
    db_execute("UPDATE Korbaron SET parol = ? WHERE telegram_id = ?", (hashed_password, message.from_user.id))
    db_execute("DELETE FROM PasswordRequests WHERE telegram_id = ?", (message.from_user.id,)) # Clean up request
    await state.clear(); await message.answer("‚úÖ **–ü–∞—Ä–æ–ª –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥!**", parse_mode="Markdown"); await asyncio.sleep(2); await cmd_start(message, state)

# --- –ü–ê–ù–ï–õ–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† ---
@admin_router.callback_query(F.data == "back_to_admin_panel")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext): await state.clear(); await callback.message.edit_text("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")
async def send_manage_fanho_menu(message_or_callback: types.Message | types.CallbackQuery):
    fanho = db_execute("SELECT nomi_fan FROM Fanho", fetchall=True)
    text = "üìö **–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –§–∞–Ω“≥–æ**\n\n" + ("\n".join([f"üîπ `{fan[0]}`" for fan in fanho]) if fanho else "_–Ø–≥–æ–Ω —Ñ–∞–Ω –∏–ª–æ–≤–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç._")
    buttons = [[InlineKeyboardButton(text="‚ûï –ò–ª–æ–≤–∞–∏ –§–∞–Ω", callback_data="admin_add_fan")], [InlineKeyboardButton(text="‚ûñ –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –§–∞–Ω", callback_data="admin_delete_fan_start")], [back_button_admin]]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    if isinstance(message_or_callback, types.CallbackQuery): await message_or_callback.message.edit_text(text, reply_markup=markup, parse_mode="Markdown")
    else: await message_or_callback.answer(text, reply_markup=markup, parse_mode="Markdown")
@admin_router.callback_query(F.data == "admin_manage_fanho")
async def admin_manage_fanho(callback: CallbackQuery): await send_manage_fanho_menu(callback)
@admin_router.callback_query(F.data == "admin_add_fan")
async def admin_add_fan_start(callback: CallbackQuery, state: FSMContext): await callback.message.edit_text("‚úçÔ∏è –ù–æ–º–∏ —Ñ–∞–Ω–Ω–∏ –Ω–∞–≤—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥:"); await state.set_state(AdminStates.add_fan_name)
@admin_router.message(AdminStates.add_fan_name)
async def admin_add_fan_name(message: Message, state: FSMContext):
    try: db_execute("INSERT INTO Fanho (nomi_fan) VALUES (?)", (message.text,)); await message.answer(f"‚úÖ –§–∞–Ω–Ω–∏ '{message.text}' –∏–ª–æ–≤–∞ —à—É–¥.")
    except sqlite3.IntegrityError: await message.answer(f"‚ö†Ô∏è –§–∞–Ω–Ω–∏ '{message.text}' –∞–ª–ª–∞–∫–∞–π –º–∞–≤“∑—É–¥ –∞—Å—Ç.")
    await state.clear(); await send_manage_fanho_menu(message)
@admin_router.callback_query(F.data == "admin_delete_fan_start")
async def admin_delete_fan_start(callback: CallbackQuery):
    fanho = db_execute("SELECT id, nomi_fan FROM Fanho", fetchall=True)
    if not fanho: await callback.answer("‚ùå –Ø–≥–æ–Ω —Ñ–∞–Ω –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –Ω–µ—Å—Ç.", show_alert=True); return
    buttons = [[InlineKeyboardButton(text=f"üóëÔ∏è {fan[1]}", callback_data=f"delete_fan_{fan[0]}")] for fan in fanho]; buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="admin_manage_fanho")])
    await callback.message.edit_text("–ö–∞–¥–æ–º —Ñ–∞–Ω—Ä–æ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –º–µ—Ö–æ“≥–µ–¥?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
@admin_router.callback_query(F.data.startswith("delete_fan_"))
async def admin_delete_fan_confirm(callback: CallbackQuery): db_execute("DELETE FROM Fanho WHERE id = ?", (int(callback.data.split("_")[2]),)); await callback.answer("‚úÖ –§–∞–Ω –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ —à—É–¥!", show_alert=True); await send_manage_fanho_menu(callback)
@admin_router.callback_query(F.data == "admin_manage_users")
async def admin_manage_users(callback: CallbackQuery):
    users = db_execute("SELECT user_id_custom, nomu_nasab FROM Korbaron WHERE role != 'admin'", fetchall=True)
    text = "üë• **–†”Ø–π—Ö–∞—Ç–∏ –ö–æ—Ä–±–∞—Ä–æ–Ω**\n\n" + ("\n".join([f"{i}. **{user[1]}**\n   _ID:_ `{user[0]}`" for i, user in enumerate(users, 1)]) if users else "_–ö–æ—Ä–±–∞—Ä–æ–Ω —Å–∞–±—Ç–∏ –Ω–æ–º –Ω–∞—à—É–¥–∞–∞–Ω–¥._")
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_button_admin]]), parse_mode="Markdown")
@admin_router.callback_query(F.data == "admin_manage_questions")
async def admin_manage_questions(callback: CallbackQuery):
    buttons = [[InlineKeyboardButton(text="‚ûï –ò–ª–æ–≤–∞–∏ –°–∞–≤–æ–ª", callback_data="q_add_start")], [InlineKeyboardButton(text="üóëÔ∏è –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –°–∞–≤–æ–ª", callback_data="q_view_delete_start")], [back_button_admin]]
    await callback.message.edit_text("‚ùì **–ò–¥–æ—Ä–∞–∫—É–Ω–∏–∏ –°–∞–≤–æ–ª“≥–æ**", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="Markdown")
@admin_router.callback_query(F.data == "q_add_start")
async def q_add_start(callback: CallbackQuery, state: FSMContext):
    fanho = db_execute("SELECT id, nomi_fan FROM Fanho", fetchall=True);
    if not fanho: await callback.answer("–ê–≤–≤–∞–ª —Ñ–∞–Ω –∏–ª–æ–≤–∞ –∫—É–Ω–µ–¥!", show_alert=True); return
    buttons = [[InlineKeyboardButton(text=f, callback_data=f"q_add_fan_{i}")] for i, f in fanho]; buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="admin_manage_questions")])
    await callback.message.edit_text("–ë–∞—Ä–æ–∏ –∫–∞–¥–æ–º —Ñ–∞–Ω —Å–∞–≤–æ–ª –∏–ª–æ–≤–∞ –º–µ–∫—É–Ω–µ–¥?", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)); await state.set_state(AdminStates.add_question_select_fan)
@admin_router.callback_query(F.data.startswith("q_add_fan_"), AdminStates.add_question_select_fan)
async def q_add_fan_selected(callback: CallbackQuery, state: FSMContext): await state.update_data(fan_id=int(callback.data.split("_")[3])); await callback.message.edit_text("–ú–∞—Ç–Ω–∏ —Å–∞–≤–æ–ª—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:"); await state.set_state(AdminStates.add_question_text)
@admin_router.message(AdminStates.add_question_text)
async def q_get_text(message: Message, state: FSMContext): await state.update_data(savol_matn=message.text); await message.answer("–í–∞—Ä–∏–∞–Ω—Ç–∏ '–ê':"); await state.set_state(AdminStates.add_question_option_a)
@admin_router.message(AdminStates.add_question_option_a)
async def q_get_opt_a(message: Message, state: FSMContext): await state.update_data(variant_a=message.text); await message.answer("–í–∞—Ä–∏–∞–Ω—Ç–∏ '–ë':"); await state.set_state(AdminStates.add_question_option_b)
@admin_router.message(AdminStates.add_question_option_b)
async def q_get_opt_b(message: Message, state: FSMContext): await state.update_data(variant_b=message.text); await message.answer("–í–∞—Ä–∏–∞–Ω—Ç–∏ '–í':"); await state.set_state(AdminStates.add_question_option_c)
@admin_router.message(AdminStates.add_question_option_c)
async def q_get_opt_c(message: Message, state: FSMContext): await state.update_data(variant_c=message.text); await message.answer("–í–∞—Ä–∏–∞–Ω—Ç–∏ '–ì':"); await state.set_state(AdminStates.add_question_option_d)
@admin_router.message(AdminStates.add_question_option_d)
async def q_get_opt_d(message: Message, state: FSMContext):
    await state.update_data(variant_d=message.text); buttons = [[InlineKeyboardButton(text=c, callback_data=f"q_correct_{c}")] for c in "ABCD"]
    await message.answer("“∂–∞–≤–æ–±–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)); await state.set_state(AdminStates.add_question_correct_answer)
@admin_router.callback_query(F.data.startswith("q_correct_"), AdminStates.add_question_correct_answer)
async def q_get_correct_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data(); db_execute("INSERT INTO Savolho (fan_id, savol_matn, variant_a, variant_b, variant_c, variant_d, javobi_durust) VALUES (?, ?, ?, ?, ?, ?, ?)", (data['fan_id'], data['savol_matn'], data['variant_a'], data['variant_b'], data['variant_c'], data['variant_d'], callback.data.split("_")[2]))
    await state.clear(); await callback.message.edit_text("‚úÖ –°–∞–≤–æ–ª –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥!")
    await callback.message.answer("–ü–∞–Ω–µ–ª–∏ —Å–∞–≤–æ–ª“≥–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ûï –ò–ª–æ–≤–∞–∏ –¥–∏–≥–∞—Ä", callback_data="q_add_start")], [back_button_admin]]))
@admin_router.callback_query(F.data == "q_view_delete_start")
async def q_view_delete_start(callback: CallbackQuery, state: FSMContext): await q_add_start(callback, state); await state.set_state(AdminStates.delete_question_select_fan)
@admin_router.callback_query(F.data.startswith("q_add_fan_"), AdminStates.delete_question_select_fan)
async def q_delete_fan_selected(callback: CallbackQuery, state: FSMContext):
    questions = db_execute("SELECT id, savol_matn FROM Savolho WHERE fan_id = ?", (int(callback.data.split("_")[3]),), fetchall=True)
    if not questions: await callback.answer("‚ùå –ë–∞—Ä–æ–∏ –∏–Ω —Ñ–∞–Ω —Å–∞–≤–æ–ª –Ω–µ—Å—Ç.", show_alert=True); await state.clear(); return
    buttons = [[InlineKeyboardButton(text=f"‚ùå {q_text[:40]}...", callback_data=f"q_delete_{q_id}")] for q_id, q_text in questions]; buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ë–æ–∑–≥–∞—à—Ç", callback_data="admin_manage_questions")])
    await callback.message.edit_text("–°–∞–≤–æ–ª—Ä–æ –±–∞—Ä–æ–∏ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)); await state.clear()
@admin_router.callback_query(F.data.startswith("q_delete_"))
async def q_delete_confirm(callback: CallbackQuery): db_execute("DELETE FROM Savolho WHERE id = ?", (int(callback.data.split("_")[2]),)); await callback.answer("‚úÖ –°–∞–≤–æ–ª –Ω–µ—Å—Ç —à—É–¥!", show_alert=True); await admin_manage_questions(callback)
@admin_router.callback_query(F.data == "admin_password_requests")
async def admin_password_requests(callback: CallbackQuery):
    requests = db_execute("SELECT telegram_id, user_name FROM PasswordRequests", fetchall=True)
    if not requests: await callback.answer("‚úÖ –î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ —Ñ–∞—ä–æ–ª –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–Ω–¥.", show_alert=True); return
    buttons = [[InlineKeyboardButton(text=f"–¢–∞—Å–¥–∏“õ: {req[1]}", callback_data=f"approve_reset_{req[0]}")] for req in requests]; buttons.append([back_button_admin])
    await callback.message.edit_text("üîí –†”Ø–π—Ö–∞—Ç–∏ –¥–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ —Ñ–∞—ä–æ–ª:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
@admin_router.callback_query(F.data.startswith("approve_reset_"))
async def approve_reset(callback: CallbackQuery, bot: Bot):
    user_id = int(callback.data.split("_")[2]); request_data = db_execute("SELECT verification_code FROM PasswordRequests WHERE telegram_id = ?", (user_id,), fetchone=True)
    if not request_data: await callback.answer("–ò–Ω –¥–∞—Ä—Ö–æ—Å—Ç –¥–∏–≥–∞—Ä —Ñ–∞—ä–æ–ª –Ω–µ—Å—Ç.", show_alert=True); return
    correct_code = request_data[0]
    try:
        await bot.send_message(user_id, f"üîë –ö–æ–¥–∏ —Ç–∞—Å–¥–∏“õ–∏–∏ —à—É–º–æ: ||{correct_code}||", parse_mode="MarkdownV2")
        options = {correct_code};
        while len(options) < 4: options.add(str(random.randint(1000, 9999)))
        shuffled_options = list(options); random.shuffle(shuffled_options)
        code_buttons = [[InlineKeyboardButton(text=opt, callback_data=f"vcode_{opt}_{correct_code}")] for opt in shuffled_options]
        await bot.send_message(user_id, "–ö–æ–¥–∏ –¥—É—Ä—É—Å—Ç—Ä–æ –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:", reply_markup=InlineKeyboardMarkup(inline_keyboard=code_buttons))
        await callback.answer("‚úÖ –î–∞—Ä—Ö–æ—Å—Ç —Ç–∞—Å–¥–∏“õ —à—É–¥.", show_alert=True); 
        # –î–∞—Ä—Ö–æ—Å—Ç –¥–∞—Ä –∏–Ω “∑–æ –Ω–µ—Å—Ç –∫–∞—Ä–¥–∞ –Ω–∞–º–µ—à–∞–≤–∞–¥, –±–∞–ª–∫–∏ –±–∞—ä–¥–∏ –∏–≤–∞–∑–∏ –ø–∞—Ä–æ–ª
        await admin_password_requests(callback)
    except Exception as e: await callback.answer(f"‚ùå –•–∞—Ç–æ–≥”£: {e}", show_alert=True)

# --- –ü–ê–ù–ï–õ–ò –î–û–ù–ò–®“∂”Æ ---

# --- >>>>> “ö–ò–°–ú–ò –ò–°–õ–û“≤–®–£–î–ê <<<<< ---
@student_router.callback_query(F.data == "back_to_student_panel")
async def back_to_student_panel_callback(callback: types.CallbackQuery, state: FSMContext):
    """
    –ò–Ω —Ñ—É–Ω–∫—Å–∏—è —Ö–∞—Ç–æ–≥”£ –¥–æ—à—Ç. –†–∞—Ñ—Ç–æ—Ä–∏ –¥—É—Ä—É—Å—Ç –∏–Ω –∞—Å—Ç:
    1. –ü–∞—ë–º–∏ –∫”Ø“≥–Ω–∞—Ä–æ, –∫–∏ —Ç—É–≥–º–∞–∏ "–ë–æ–∑–≥–∞—à—Ç" –¥–æ—à—Ç, –Ω–µ—Å—Ç –∫—É–Ω–µ–¥ (`callback.message.delete()`).
    2. –ü–∞—ë–º–∏ –Ω–∞–≤—Ä–æ –±–æ –º–∞—Ç–Ω–∏ –ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å”£ –≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞—Å–æ—Å”£ (`ReplyKeyboardMarkup`) —Ñ–∏—Ä–∏—Å—Ç–µ–¥.
    """
    await state.clear()
    user = db_execute("SELECT nomu_nasab FROM Korbaron WHERE telegram_id = ?", (callback.from_user.id,), fetchone=True)
    
    # “∂–∞–≤–æ–± –±–∞ callback –±–∞—Ä–æ–∏ –∞–∑ –±–∞–π–Ω –±—É—Ä–¥–∞–Ω–∏ "—Å–æ–∞—Ç—á–∞" –¥–∞—Ä —Ç—É–≥–º–∞
    await callback.answer()

    # –ù–µ—Å—Ç –∫–∞—Ä–¥–∞–Ω–∏ –ø–∞—ë–º–∏ “∑–æ—Ä”£ (–º–∞—Å–∞–ª–∞–Ω, –º–µ–Ω—é–∏ "–¢–∞–Ω–∑–∏–º–æ—Ç")
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        # –ê–≥–∞—Ä –ø–∞—ë–º –∞–ª–ª–∞–∫–∞–π –Ω–µ—Å—Ç —à—É–¥–∞ –±–æ—à–∞–¥, —Ö–∞—Ç–æ–≥–∏—Ä–æ —Å–∞—Ä—Ñ–∏ –Ω–∞–∑–∞—Ä –º–µ–∫—É–Ω–µ–º
        pass

    # –§–∏—Ä–∏—Å—Ç–æ–¥–∞–Ω–∏ –ø–∞—ë–º–∏ –Ω–∞–≤ –±–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ ReplyKeyboard
    if user:
        await callback.message.answer(
            f"üéì **–ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å–∏–∏ {user[0]}**",
            reply_markup=get_student_reply_keyboard(),
            parse_mode="Markdown"
        )

# --- >>>>> –ê–ù“∂–û–ú–ò “ö–ò–°–ú–ò –ò–°–õ–û“≤–®–£–î–ê <<<<< ---

# –î–∞–≤–æ–º–Ω–æ–∫–∏–∏ –±–æ“õ–∏–º–æ–Ω–¥–∞–∏ –∫–æ–¥
@main_router.message(F.text == "‚úçÔ∏è –°—É–ø–æ—Ä–∏–¥–∞–Ω–∏ –¢–µ—Å—Ç")
async def student_start_test(message: Message, state: FSMContext):
    await state.clear() # –¢–æ–∑–∞ –∫–∞—Ä–¥–∞–Ω–∏ “≥–æ–ª–∞—Ç–∏ –ø–µ—à–∏–Ω–∞
    fanho = db_execute("SELECT id, nomi_fan FROM Fanho WHERE id IN (SELECT DISTINCT fan_id FROM Savolho)", fetchall=True)
    if not fanho: 
        await message.answer("‚è≥ –¢–µ—Å—Ç“≥–æ–∏ —Ñ–∞—ä–æ–ª “≥–æ–ª–æ –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–Ω–¥."); 
        return
    
    buttons = [[InlineKeyboardButton(text=f"üî∏ {f}", callback_data=f"test_fan_{i}")] for i, f in fanho]
    # –¢—É–≥–º–∞–∏ –±–æ–∑–≥–∞—à—Ç –¥–∞—Ä –∏–Ω “∑–æ –ª–æ–∑–∏–º –Ω–µ—Å—Ç, —á—É–Ω –∫–æ—Ä–±–∞—Ä –º–µ—Ç–∞–≤–æ–Ω–∞–¥ –∞–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–∏ –∞—Å–æ—Å”£ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –±–∞—Ä–∞–¥.
    await message.answer(
        "‚úçÔ∏è **–ò–Ω—Ç–∏—Ö–æ–±–∏ —Ñ–∞–Ω –±–∞—Ä–æ–∏ —Ç–µ—Å—Ç**", 
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), 
        parse_mode="Markdown"
    )

@student_router.callback_query(F.data == "back_to_student_panel_main_menu")
async def back_to_student_panel_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    user = db_execute("SELECT nomu_nasab FROM Korbaron WHERE telegram_id = ?", (callback.from_user.id,), fetchone=True)
    await callback.message.edit_text(f"üéì **–ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å–∏–∏ {user[0]}**", reply_markup=get_student_reply_keyboard(), parse_mode="Markdown")


@main_router.message(F.text == "üìä –ù–∞—Ç–∏“∑–∞“≥–æ–∏ –ú–∞–Ω")
async def student_my_results(message: Message, state: FSMContext):
    await state.clear()
    results = db_execute("SELECT f.nomi_fan, r.sanai_suporidan, r.javobhoi_durust, r.javobhoi_nodurust FROM Natijaho r JOIN Fanho f ON r.fan_id = f.id WHERE r.user_telegram_id = ? ORDER BY r.id DESC", (message.from_user.id,), fetchall=True)
    text = "üìä **–ù–∞—Ç–∏“∑–∞“≥–æ–∏ –æ—Ö–∏—Ä–∏–Ω–∏ –º–∞–Ω**\n\n"
    if results:
        for fan, sana, d, n in results:
            total = d + n
            percent = (d / total * 100) if total > 0 else 0
            emoji = 'üèÜ' if percent >= 80 else 'üëç' if percent >= 50 else 'ü§î'
            text += f"üîπ **–§–∞–Ω:** {fan} {emoji}\n   _–°–∞–Ω–∞:_ `{sana}`\n   _–ù–∞—Ç–∏“∑–∞:_ **{d}** –¥—É—Ä—É—Å—Ç –∞–∑ {total} ({percent:.0f}%)\n\n"
    else:
        text += "_–®—É–º–æ —Ç–æ “≥–æ–ª —è–≥–æ–Ω —Ç–µ—Å—Ç –Ω–∞—Å—É–ø–æ—Ä–∏–¥–∞–µ–¥._"
        
    await message.answer(text, parse_mode="Markdown")


@main_router.message(F.text == "‚öôÔ∏è –¢–∞–Ω–∑–∏–º–æ—Ç")
async def student_settings(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚öôÔ∏è **–¢–∞–Ω–∑–∏–º–æ—Ç**", reply_markup=get_student_settings_inline_keyboard(), parse_mode="Markdown")

@student_router.callback_query(F.data == "settings_change_password")
async def settings_change_password(callback: CallbackQuery, state: FSMContext): 
    await callback.message.edit_text("‚úçÔ∏è –ü–∞—Ä–æ–ª–∏ –Ω–∞–≤–∏ —Ö—É–¥—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥ (–º–∏–Ω. 6 –∞–ª–æ–º–∞—Ç):")
    await state.set_state(SettingsStates.getting_new_password_from_settings)
    await callback.answer()

@student_router.message(SettingsStates.getting_new_password_from_settings)
async def get_new_password_from_settings(message: Message, state: FSMContext, bot: Bot):
    parol = message.text
    try: await message.delete()
    except TelegramBadRequest: pass
    
    if not parol or len(parol) < 6:
        await message.answer("‚ö†Ô∏è **–û–≥–æ“≥”£:** –ü–∞—Ä–æ–ª –±–æ—è–¥ “≥–∞–¥–¥–∏ –∞“õ–∞–ª 6 –∞–ª–æ–º–∞—Ç –¥–æ—à—Ç–∞ –±–æ—à–∞–¥.")
        return

    hashed_password = bcrypt.hashpw(parol.encode('utf-8'), bcrypt.gensalt())
    db_execute("UPDATE Korbaron SET parol = ? WHERE telegram_id = ?", (hashed_password, message.from_user.id))
    await state.clear()
    
    sent_msg = await message.answer("‚úÖ **–ü–∞—Ä–æ–ª –±–æ–º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–≤–∞–∑ –∫–∞—Ä–¥–∞ —à—É–¥!**", parse_mode="Markdown")
    await asyncio.sleep(2)
    try:
        await sent_msg.delete()
    except TelegramBadRequest:
        pass
    
    # –ë–∞ “∑–æ–∏ —Ç–∞“≥—Ä–∏—Ä, –ø–∞—ë–º–∏ –Ω–∞–≤ –º–µ—Ñ–∏—Ä–∏—Å—Ç–µ–º
    user = db_execute("SELECT nomu_nasab FROM Korbaron WHERE telegram_id = ?", (message.from_user.id,), fetchone=True)
    await message.answer(f"üéì **–ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å–∏–∏ {user[0]}**", reply_markup=get_student_reply_keyboard(), parse_mode="Markdown")

@student_router.callback_query(F.data.startswith("test_fan_"))
async def start_test_for_fan(callback: CallbackQuery, state: FSMContext, bot: Bot):
    fan_id = int(callback.data.split("_")[2]); user_id = callback.from_user.id
    unanswered_questions_query = "SELECT s.* FROM Savolho s LEFT JOIN AnsweredQuestions aq ON s.id = aq.savol_id AND aq.user_telegram_id = ? WHERE s.fan_id = ? AND aq.savol_id IS NULL ORDER BY RANDOM() LIMIT ?"
    questions = db_execute(unanswered_questions_query, (user_id, fan_id, QUESTIONS_PER_TEST), fetchall=True)
    if len(questions) < QUESTIONS_PER_TEST:
        total_questions_count = db_execute("SELECT COUNT(id) FROM Savolho WHERE fan_id = ?", (fan_id,), fetchone=True)[0]
        if total_questions_count < QUESTIONS_PER_TEST: await callback.answer(f"‚ö†Ô∏è –ë–∞—Ä–æ–∏ –∏–Ω —Ñ–∞–Ω —Å–∞–≤–æ–ª“≥–æ –∫–∏—Ñ–æ—è –Ω–µ—Å—Ç (–±–æ—è–¥ {QUESTIONS_PER_TEST} –±–æ—à–∞–¥).", show_alert=True); return
        await callback.answer("üéâ –®—É–º–æ “≥–∞–º–∞–∏ —Å–∞–≤–æ–ª“≥–æ–∏ –∏–Ω —Ñ–∞–Ω—Ä–æ “∑–∞–≤–æ–± –¥–æ–¥–µ–¥! –î–∞–≤—Ä–∞ –∞–∑ –Ω–∞–≤ –æ“ì–æ–∑ –º–µ—à–∞–≤–∞–¥.", show_alert=True)
        db_execute("DELETE FROM AnsweredQuestions WHERE user_telegram_id = ? AND savol_id IN (SELECT id FROM Savolho WHERE fan_id = ?)", (user_id, fan_id))
        questions = db_execute("SELECT * FROM Savolho WHERE fan_id = ? ORDER BY RANDOM() LIMIT ?", (fan_id, QUESTIONS_PER_TEST), fetchall=True)
    await state.update_data(fan_id=fan_id, questions=questions, current_q_index=0, correct_answers=0)
    await callback.message.delete(); 
    await send_question(bot, user_id, state)
    await state.set_state(StudentStates.taking_test)
    await callback.answer()

async def send_question(bot: Bot, user_id: int, state: FSMContext):
    data = await state.get_data(); q_index = data.get('current_q_index', 0); questions = data.get('questions', [])
    if q_index >= len(questions):
        correct = data.get('correct_answers', 0); total = len(questions); incorrect = total - correct
        percent = (correct / total) * 100 if total > 0 else 0; emoji = "üéâ" if percent >= 80 else "‚úÖ" if percent >= 50 else "üòî"
        db_execute("INSERT INTO Natijaho (user_telegram_id, fan_id, sanai_suporidan, javobhoi_durust, javobhoi_nodurust) VALUES (?, ?, ?, ?, ?)", (user_id, data['fan_id'], date.today(), correct, incorrect))
        for q_id in [q[0] for q in questions]: db_execute("INSERT OR IGNORE INTO AnsweredQuestions (user_telegram_id, savol_id) VALUES (?, ?)", (user_id, q_id))
        
        user = db_execute("SELECT nomu_nasab FROM Korbaron WHERE telegram_id = ?", (user_id,), fetchone=True)
        await bot.send_message(user_id, f"**–¢–µ—Å—Ç –±–∞ –∞–Ω“∑–æ–º —Ä–∞—Å–∏–¥!** {emoji}\n\n‚úÖ **–î—É—Ä—É—Å—Ç:** {correct}\n‚ùå **–ù–æ–¥—É—Ä—É—Å—Ç:** {incorrect}\nüíØ **–•–æ–ª:** {percent:.0f}%", parse_mode="Markdown")
        await asyncio.sleep(1)
        await bot.send_message(user_id, f"üéì **–ö–∞–±–∏–Ω–µ—Ç–∏ —à–∞—Ö—Å–∏–∏ {user[0]}**", reply_markup=get_student_reply_keyboard(), parse_mode="Markdown")
        
        await state.clear(); return
    
    q_data = questions[q_index]; _, _, q_text, opt_a, opt_b, opt_c, opt_d, correct_ans_char = q_data
    text = f"**–°–∞–≤–æ–ª–∏ {q_index + 1} –∞–∑ {len(questions)}**\n\n{q_text}"
    variants = {'A': opt_a, 'B': opt_b, 'C': opt_c, 'D': opt_d}; options = list(variants.items()); random.shuffle(options)
    buttons = [[InlineKeyboardButton(text=f"{text_option}", callback_data=f"test_ans_{'True' if char == correct_ans_char else 'False'}")] for char, text_option in options]
    buttons_in_rows = [buttons[i:i + 1] for i in range(len(buttons))] # “≤–∞—Ä —Ç—É–≥–º–∞ –¥–∞—Ä —Å–∞—Ç—Ä–∏ –Ω–∞–≤
    await bot.send_message(user_id, text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons_in_rows), parse_mode="Markdown")

@student_router.callback_query(F.data.startswith("test_ans_"), StudentStates.taking_test)
async def process_test_answer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.delete(); data = await state.get_data()
    if callback.data.split("_")[2] == 'True': await state.update_data(correct_answers=data.get('correct_answers', 0) + 1)
    await callback.answer(); await state.update_data(current_q_index=data.get('current_q_index', 0) + 1)
    await send_question(bot, callback.from_user.id, state)

# --- –°–ò–°–¢–ï–ú–ê–ò –ö”Æ–ú–ê–ö (–î–ê–°–¢–ì–ò–†”¢) ---
@main_router.message(F.text == "üí¨ –ö”Ø–º–∞–∫")
async def student_help_start(message: Message, state: FSMContext):
    await state.set_state(StudentStates.getting_support_message)
    await message.answer("üí¨ **–ú—É—Ä–æ“∑–∏–∞—Ç –±–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**\n_–°–∞–≤–æ–ª —ë –º—É—à–∫–∏–ª–∏–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥. –ë–∞—Ä–æ–∏ –±–µ–∫–æ—Ä –∫–∞—Ä–¥–∞–Ω, /start-—Ä–æ –ø–∞—Ö—à –∫—É–Ω–µ–¥._",
                         parse_mode="Markdown", reply_markup=ReplyKeyboardRemove())

@student_router.message(StudentStates.getting_support_message)
async def get_support_message(message: Message, state: FSMContext, bot: Bot):
    db_execute("INSERT INTO SupportTickets (user_telegram_id, user_name, message_text) VALUES (?, ?, ?)", (message.from_user.id, message.from_user.full_name, message.text))
    await message.answer("‚úÖ **–î–∞—Ä—Ö–æ—Å—Ç–∏ —à—É–º–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥!**", parse_mode="Markdown", reply_markup=get_student_reply_keyboard())
    try: await bot.send_message(ADMIN_ID, f"üîî **–î–∞—Ä—Ö–æ—Å—Ç–∏ –Ω–∞–≤–∏ –∫”Ø–º–∞–∫!**\n**–ê–∑:** {message.from_user.full_name}\n**–ú–∞—Ç–Ω:**\n_{message.text}_", parse_mode="Markdown")
    except Exception as e: logging.error(f"Failed to send support ticket notification: {e}")
    await state.clear()

@admin_router.callback_query(F.data == "admin_support_tickets")
async def admin_support_tickets(callback: CallbackQuery):
    open_tickets = db_execute("SELECT ticket_id, user_name FROM SupportTickets WHERE status = 'open'", fetchall=True)
    if not open_tickets: await callback.answer("‚úÖ –î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ —Ñ–∞—ä–æ–ª –≤—É“∑—É–¥ –Ω–∞–¥–æ—Ä–∞–Ω–¥.", show_alert=True); return
    text = "üì® **–î–∞—Ä—Ö–æ—Å—Ç“≥–æ–∏ —Ñ–∞—ä–æ–ª–∏ –∫”Ø–º–∞–∫:**\n"; buttons = [[InlineKeyboardButton(text=f"üí¨ “∂–∞–≤–æ–± –¥–æ–¥–∞–Ω –±–∞ {user_name}", callback_data=f"admin_reply_ticket_{ticket_id}")] for ticket_id, user_name in open_tickets]; buttons.append([back_button_admin])
    await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
@admin_router.callback_query(F.data.startswith("admin_reply_ticket_"))
async def admin_reply_ticket_start(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split("_")[3]); ticket_info = db_execute("SELECT user_telegram_id, user_name, message_text FROM SupportTickets WHERE ticket_id = ?", (ticket_id,), fetchone=True)
    if not ticket_info: await callback.answer("‚ùå –ò–Ω –¥–∞—Ä—Ö–æ—Å—Ç —ë—Ñ—Ç –Ω–∞—à—É–¥.", show_alert=True); return
    user_id, user_name, message_text = ticket_info
    await state.update_data(reply_to_user_id=user_id, ticket_id=ticket_id); await state.set_state(AdminStates.replying_to_ticket)
    reply_prompt_text = f"‚úçÔ∏è **“∂–∞–≤–æ–± –±–∞ {user_name}**\nüìú _–î–∞—Ä—Ö–æ—Å—Ç–∏ ”Ø:_\n_{message_text}_\n\n**“∂–∞–≤–æ–±–∏ —Ö—É–¥—Ä–æ –Ω–∞–≤–∏—Å–µ–¥:**"
    await callback.message.edit_text(reply_prompt_text, parse_mode="Markdown")
@admin_router.message(AdminStates.replying_to_ticket)
async def admin_send_reply(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data(); user_id = data['reply_to_user_id']; ticket_id = data['ticket_id']
    try:
        await bot.send_message(user_id, f"üì© **“∂–∞–≤–æ–± –∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**\n\n_{message.text}_", parse_mode="Markdown")
        await message.answer("‚úÖ “∂–∞–≤–æ–±–∏ —à—É–º–æ —Ñ–∏—Ä–∏—Å—Ç–æ–¥–∞ —à—É–¥."); db_execute("UPDATE SupportTickets SET status = 'closed' WHERE ticket_id = ?", (ticket_id,))
    except Exception as e: await message.answer(f"‚ùå –•–∞—Ç–æ–≥”£: {e}")
    finally: await state.clear(); await message.answer("üëë **–ü–∞–Ω–µ–ª–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**", reply_markup=get_admin_panel_keyboard(), parse_mode="Markdown")

# --- –§–£–ù–ö–°–ò–Ø–ò –ê–°–û–°–ò–ò –ò“∂–†–û–ö–£–ù–ê–ù–î–ê ---
async def set_main_menu(bot: Bot): await bot.set_my_commands([BotCommand(command='/start', description='‚ñ∂Ô∏è –û“ì–æ–∑–∏ –∫–æ—Ä / –ë–æ–∑–≥–∞—à—Ç')])
async def main():
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    setup_database()
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(main_router); dp.include_router(admin_router); dp.include_router(student_router)
    await set_main_menu(bot); await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ë–æ—Ç –±–∞ –∫–æ—Ä –æ–º–æ–¥–∞ –∞—Å—Ç..."); await dp.start_polling(bot)

if __name__ == '__main__':
    try: asyncio.run(main())
    except KeyboardInterrupt: logging.info("–ö–æ—Ä–∏ –±–æ—Ç “õ–∞—Ç—ä —à—É–¥.")